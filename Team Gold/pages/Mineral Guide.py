# Codes generated by chatgpt are lines 12-15 and 22-49
# Codes 29, 31 and 41 was revised to best fit the project and code generated is an outline of what I would want the code to be. 

import streamlit as st
import fitz  # PyMuPDF
import pandas as pd
import openai
import os

st.sidebar.markdown("# Mineral Guide üìñ")

BASE_DIR = os.path.dirname(__file__)

# build a path like ".../pages/data/2025_03 March Water Quality Report.pdf"
pdf_path = os.path.join(BASE_DIR, "data", "2025_03 March Water Quality Report.pdf")

# then open
with fitz.open(pdf_path) as doc:
    extracted_text = "".join(page.get_text() for page in doc)

st.title("üíß Valley Water Mineral Guide")
st.markdown("We currently have the latest water report from Valley Water dated in March 2025")

# --- Chat input (freeform questions) ---
user_question = st.chat_input("Ask a question or a concern about the water report or minerals found in water")

# --- Use OpenAI to answer using your dataset ---
if user_question:
    with st.spinner("Thinking..."):
        # ‚úÖ Define the prompt using the extracted PDF text and the user's question
        prompt = (
            f"This is a water quality report from San Jose in March 2025.\n"
            f"Here is the report content:\n{extracted_text}\n\n"
            f"Now answer the following question for an adult to understand that does not know much about water:\n{user_question}"
        )

        # ‚úÖ Use the new OpenAI v1.x client syntax
        from openai import OpenAI
        client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])

        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a Valley Water employee that is assigned to answer any San Jose residents' questions about the water conditions."},
                    {"role": "user", "content": prompt}
                ]
            )
            answer = response.choices[0].message.content.strip()
            st.markdown(f"**üí° Answer:** {answer}")
        except Exception as e:
            st.error(f"‚ùå Error: {e}")